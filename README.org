#+title: GrabCartoons
#+author: Diego Zamboni, Ben Kuperman

GrabCartoons is a comic-summarizing utility. It is modular, and it is easy to write modules for new comics.

[[file:ChangeLog][(ChangeLog)]]

You can see a sample of grabcartoons output [[https://htmlpreview.github.io/?https://github.com/zzamboni/grabcartoons/blob/master/sample-output.html][here]].

* Table of Contents :TOC_3:noexport:
- [[#installation][Installation]]
- [[#usage][Usage]]
- [[#available-comics][Available comics]]
  - [[#templates][Templates]]
- [[#how-to-define-your-own-comics][How to define your own comics:]]
- [[#contributions][Contributions]]
- [[#authors][Authors]]

* Installation
   :PROPERTIES:
   :CUSTOM_ID: installation
   :END:

You can download the latest source code for this project in either [[http://github.com/zzamboni/grabcartoons/zipball/master][zip]] or [[http://github.com/zzamboni/grabcartoons/tarball/master][tar]] formats. It should run as-is on most modern Perl installations.

You can also clone this git repository:

#+begin_src console
git clone https://github.com/zzamboni/grabcartoons.git
#+end_src

You can run =./grabcartoons.pl= directly from within the source directory, or run =make install= to install it under =/usr/local=. You can specify the =PREFIX= variable if you want to install somewhere else (e.g. =make install PREFIX=/some/path=).

Grabcartoons works out of the box on Linux/Unix/macOS. Windows is not explicitly supported, but it can be made to work with some changes. See https://github.com/zzamboni/grabcartoons/issues/11 for details.

* Usage
   :PROPERTIES:
   :CUSTOM_ID: usage
   :END:
Basic usage example:

#+begin_src shell :results none
./grabcartoons.pl sinfest xkcd savage_chickens gocomics.com:gasoline > sample-output.html
#+end_src

And then open [[https://htmlpreview.github.io/?https://github.com/zzamboni/grabcartoons/blob/master/sample-output.html][sample-output.html]] in your web browser.

Full set of options:

#+begin_src shell :exports both :results output
./grabcartoons.pl --help
#+end_src

#+RESULTS:
#+begin_example
GrabCartoons version 2.8.4
Usage: ./grabcartoons.pl [ options ] [ comic_id ...]
    --all       or -a  generate a page with all the known comics on stdout.
    --list [t:] or -l  produce a list of the known comic_id's on stdout. If
                       t: is given, the list of comics from the given template
                       is produced.
    --htmllist [t:]    produce HTML list of known comic_id's on stdout. If
                       t: is given, the list of comics from the given template
                       is produced.
    --file     or -f   read list of comics from specified file.
    --random n         select n comics at random (they will be output after
                       any other comics requested)
    --write    or -w   write output to specified file instead of stdout.
    --version  or -V   print version number
    --verbose  or -v   be verbose
    --help     or -h   print this message.
    --notitles or -t   do not show comic titles (for those that have them)
    --templates        produce a list of defined templates
    --genmodules       for any template specifications (template:comictag),
                       write a snippet to comictag.pl in the directory
                       specified by --genout.
    --genout dir       output directory for generated comics.
                       (default: /Users/taazadi1/.grabcartoons/modules)

By default, it will produce a page with the given comics on stdout.

comic_id can be:
  - Any of the predefined modules (e.g. sinfest, adam_at_home)
  - Of the form 'template:comic title', including quotes if the title has
    spaces (e.g. 'gocomis.com:Citizen Dog', comics.com:Frazz). This will
    generate on the fly a module for the given comic.
  - Of the form 'template:*' or 'template:', which means "all the comics
    from the named template". This can also be passed as argument to
    the --list and --htmllist options to produce the listing from the
    given template instead of from the built-in modules.
#+end_example

* Available comics
   :PROPERTIES:
   :CUSTOM_ID: available-comics
   :END:

You can see the list of available comics with using the =--list= or =--htmllist= options.

Here's the list of comics for which we currently have modules:

#+begin_src shell :exports results :results drawer
./grabcartoons.pl --htmllist | pandoc -f html -t org
#+end_src

#+RESULTS:
:results:
- [[http://abstrusegoose.com][Abstruse Goose]] (abstrusegoose)
- [[http://www.achewood.com][Achewood]] (achewood)
- [[http://www.gocomics.com/adamathome/2020/12/07][Adam@Home]]
  (adam_at_home)
- [[http://agirlandherfed.com/][A Girl And Her Fed]] (agirlandherfed)
- [[http://alienlovespredator.com/][Alien Loves Predator]]
  (alien_loves_predator)
- [[http://www.applegeeks.com][Applegeeks]] (applegeeks)
- [[http://www.asofterworld.com/][A Softer World]] (asofterworld)
- [[http://www.realmofatland.com][Atland]] (atland)
- [[https://betterbooktitles.tumblr.com][Better Book Titles]]
  (betterbooktitles)
- [[http://www.gocomics.com/bloom-county/2020/06/08][Bloom County 2019]]
  (bloom-county)
- [[http://www.gocomics.com/bloomcounty/2020/12/07][Bloom County]]
  (bloom-county-old)
- [[http://buttersafe.com/][Buttersafe]] (buttersafe)
- [[http://www.gocomics.com/calvinandhobbes/2020/12/07][Calvin and
  Hobbes]] (calvin_and_hobbes)
- [[http://campcomic.com/comic][Camp Weedonwantcha]] (campcomic)
- [[http://www.gocomics.com/cathy/2020/12/07][Cathy Classics]] (cathy)
- [[http://choppingblock.keenspot.com/][Chopping Block]] (choppingblock)
- [[http://www.cowandboy.com/][Cow and Boy]] (cowandboy)
- [[https://www.cad-comic.com/][Ctrl+Alt+Del]] (ctrlaltdel)
- [[https://danscartoons.com/services/daily-cartoon/][Dan's Daily
  Cartoon]] (danscartoons)
- [[http://www.gocomics.com/dicktracy/2020/12/07][Dick Tracy]]
  (dick_tracy)
- [[http://www.dieselsweeties.com/][Diesel Sweeties]] (diesel_sweeties)
- [[http://www.dilbert.com/fast][Dilbert]] (dilbert)
- [[https://www.qwantz.com/index.php][Dinosaur Comics]]
  (dinosaur_comics)
- [[http://www.gocomics.com/doonesbury/2020/12/07][Doonesbury]]
  (doonesbury)
- [[http://www.errantstory.com/][Errant Story]] (errantstory)
- [[http://www.exocomics.com/][Extra Ordinary]] (extraordinary)
- [[http://ffn.nodwick.com][Full Frontal Nerdity]] (ffn)
- [[http://formalsweatpants.com/][Formal Sweatpants]] (formalsweatpants)
- [[http://www.gocomics.com/foxtrot/2020/12/06][FoxTrot]] (foxtrot)
- [[http://www.gocomics.com/garfield/2020/12/07][Garfield]] (garfield)
- [[http://www.gocomics.com/getfuzzy/2020/12/07][Get Fuzzy]] (getfuzzy)
- [[http://www.glasbergen.com][Glasbergen]] (glasbergen)
- [[http://goats.com][Goats]] (goats)
- [[https://www.goblinscomic.org][Goblins]] (goblins)
- [[http://www.girlswithslingshots.com/][Girls with Slingshots]] (gws)
- [[http://www.gocomics.com/herman/2020/12/07][Herman]] (herman)
- [[https://www.irregularwebcomic.net/][Irregular Webcomic]] (irregular)
- [[http://www.joyoftech.com/joyoftech/][The Joy of Tech]] (joy_of_tech)
- [[https://www.jspowerhour.com/][Junior Scientist Power Hour]]
  (jspowerhour)
- [[http://www.kevinandkell.com][Kevin and Kell]] (kevin_and_kell)
- [[http://www.last-halloween.com/posts/latest][The Last Halloween]]
  (lasthalloween)
- [[https://www.creators.com/read/liberty-meadows][Liberty Meadows]]
  (liberty_meadows)
- [[http://lighterthanheir.com][Lighter than Heir]] (lighter_than_heir)
- [[https://www.little-gamers.com/][Little Gamers]] (little_gamers)
- [[http://www.machall.com/][MacHall]] (machall)
- [[http://www.megatokyo.com/][MegaTokyo]] (megatokyo)
- [[http://www.gocomics.com/monty/2020/12/07][Monty]] (monty)
- [[http://www.grimmy.com/comics.php][Mother Goose & Grimm]]
  (mother_goose)
- [[http://amultiverse.com/][Scenes From A Multiverse]] (multiverse)
- [[http://www.nedroid.com/][Nedroid]] (nedroid)
- [[http://www.gocomics.com/9to5/2020/12/07][9 to 5]] (nine_to_five)
- [[http://comic.nodwick.com/][Nodwick]] (nodwick)
- [[http://www.gocomics.com/nonsequitur/2020/12/07][Non Sequitur]]
  (non_sequitur)
- [[http://theoatmeal.com/comics/][The Oatmeal]] (oatmeal)
- [[http://www.gocomics.com/offthemark/2020/12/07][Off the Mark]]
  (offthemark)
- [[https://www.giantitp.com][Order of the Stick]] (oots)
- [[http://www.gocomics.com/pearlsbeforeswine/2020/12/07][Pearls Before
  Swine]] (pearls)
- [[https://www.penny-arcade.com/comic][Penny Arcade]] (penny_arcade)
- [[http://www.phdcomics.com/comics.php][Piled Higher and Deeper]] (phd)
- [[http://www.powernapcomic.com/][Power Nap]] (powernap)
- [[http://www.pvponline.com/comic][pVp]] (pvp)
- [[http://questionablecontent.net/][Questionable Content]]
  (questionable_content)
- [[http://www.gocomics.com/reallifeadventures/2020/12/07][Real Life
  Adventures]] (real_life_adventures)
- [[http://www.redmeat.com/max-cannon/FreshMeat][Red Meat]] (redmeat)
- [[http://www.robot-hugs.com/][Robot Hugs]] (robot_hugs)
- [[http://www.gocomics.com/roseisrose/2020/12/07][Rose is Rose]]
  (rose_is_rose)
- [[http://www.gocomics.com/savage-chickens/2020/12/07][Savage
  Chickens]] (savage_chickens)
- [[https://www.schlockmercenary.com/][Schlock Mercenary]]
  (schlock_mercenary)
- [[http://shermanslagoon.com][Sherman's Lagoon]] (sherman)
- [[https://www.ruthe.de/][Shit Happens]] (shithappens)
- [[http://sinfest.net/][Sinfest]] (sinfest)
- [[http://skadicomic.com/][Skadi]] (skadi)
- [[http://www.sluggy.com/][Sluggy Freelance]] (sluggy_freelance)
- [[http://www.smbc-comics.com/][Saturday Morning Breakfast Cereal]]
  (smbc)
- [[http://sufficientlyremarkable.com/][Sufficiently Remarkable]]
  (sufficiently_remarkable)
- [[http://trenchescomic.com][The Trenches]] (the_trenches)
- [[http://www.thezombiehunters.com/][The Zombie Hunters]]
  (the_zombie_hunters)
- [[http://threepanelsoul.com/][Three Panel Soul]] (three_panel_soul)
- [[http://www.toothpastefordinner.com/][Toothpaste for Dinner]]
  (toothpastefordinner)
- [[http://www.unshelved.com][Unshelved]] (unshelved)
- [[http://www.userfriendly.org/static/][User Friendly]] (user_friendly)
- [[http://whatsnormalanyway.net/][What's Normal Anyway?]]
  (whatsnormalanyway)
- [[http://wondermark.com/][Wondermark]] (wondermark)
- [[https://xkcd.com/][xkcd]] (xkcd)
- [[http://zenpencils.com/][Zen Pencils]] (zenpencils)
- [[http://www.gocomics.com/ziggy/2020/12/07][Ziggy]] (ziggy)
:end:

** Templates
GrabCartoons also includes /templates/ that allow you to fetch any comic from a given site or using a common mechanism. At the moment we have the following templates:

#+begin_src shell :exports results :results output :wrap example
./grabcartoons.pl --templates
#+end_src

#+RESULTS:
#+begin_example
Templates defined:
	arcamax.com	Comics hosted at arcamax.com
	comics.com	Comics hosted at gocomics.com
	comicskingdom.com	Comics hosted at comicskingdom.com
	gocomics.com	Comics hosted at gocomics.com
	og-image	Comics that can be extracted from the og:image property on their page
#+end_example

Templates define a common way of fetching all the comics from certain sites (such as [[https://comics.com/][comics.com]] or [[https://comicskingdom.com/][comicskingdom.com]]) that host multiple comic strips, or by using a common mechanism (e.g. sites that publish their latest comic using the =og:image= property). If a template exists, you can easily define new modules for comics from that site, or even request them on the fly without having to write a module, by specifying the comic_id as =template:title=.


* How to define your own comics:

Modules are defined in files with =.pl= extension which specify where and how to fetch the comic.

Each comic definition is a set of pair/value keys assigned as a Perl hashref to an element of the =%COMIC= hash. For example:

#+include: modules/xkcd.pl src perl

If the comic is from a site for which a template exists, the definition is even easier, you just have to specify the comic name and the template. For example:

#+include: modules/calvin_and_hobbes.pl src perl

Each template defines how to automatically convert the comic title into a "tag" (which normally becomes part of the URL for the comic). If the automatic conversion does not work appropriately, you can manually specify the tag. For example:

#+include: modules/adam_at_home.pl src perl

The key used for the =%COMIC= hash is the "short name" of the comic. The valid fields in the hash are:

- Title :: title of the comic
- Page :: URL where to get it
- Regex :: regex to obtain image, must put the image in =$1= (the first parenthesized group)
- LinkRelImageSrc :: if true, the image URL will be automatically obtained from the first =<link rel = "image_src">= element in the page. This is increasingly being used by web comics to ease sharing on Facebook and other sites. If this flag is specified no =Regex= or other method needs to be specified.
- MultipleMatches :: if true, then all matches of =Regex= will be returned, concatenated, after doing any changes specified by =SubstOnRegexResult= or =Prepend= / =Append= on each element. If =MultipleMatches= is in effect, then the result of =$1= + =SubstOnRegexResult= + =Prepend= / =Append= is expected to be an HTML snippet, not just an image URL.
- ExtraImgAttrsRegex :: regular expression to obtain additional attributes of the comic's =<img>= tag. It has to match on the same line that =Regex= matches. If not specified, a generic text is used for the "alt" image attribute.
- TitleRegex :: regular expression to capture the title of the comic. It can match on any line _before_ Regex matches. If it does not match, no title is displayed (just the comic name). Only works for comics for which =Regex= is also defined.
- SubstOnRegexResult :: an array of two- or three-element array references containing =[ regex, string, [global] ]=. If specified, the substitution specified by each element will be applied to the string captured by =Regex= or by =StartRegex= / =EndRegex=, before applying any =Prepend= / =Append= strings. Each tuple will be applied in the order they are specified. If "global" is given and true, a global replace will be done, otherwise only the first ocurrence will be replaced. The replacement string may include other fields, referenced as ={FieldName}=.
- Prepend/Append :: strings to prepend or append to =$1= (or to the string captured by =StartRegex= / =EndRegex=) before returning it. May make use of other fields, referenced as ={FieldName}=.
- StartRegex/EndRegex :: regular expressions that specify the first and last lines to capture. The matching lines are included in the output if =InclusiveCapture= is true, and not included if =InclusiveCapture= is false (the default). If =EndRegex= is not specified, everything from =StartRegex= to the end of the page is captured. If =Regex= is also specified, it is only matched for inside the region defined by =StartRegex= / =EndRegex=.
- InclusiveCapture :: true/false value that specifies whether the lines that match =StartRegex= / =EndRegex= should be returned in the output. False by default.
- RedirectMatch / RedirectURLCapture / RedirectURLAppend / RedirectURLPrepend / MultipleRedirects :: These parameters control generalized redirection support. By default, these parameters are set so that standard redirection using the =META REFRESH= tag is followed, but can be set to redirect on arbitrary patterns. This is how it works: if the =RedirectMatch= regex matches on any line of the page, then the =RedirectURLCapture= pattern is applied to the same line, and should contain one capture group which returns the new URL to fetch and use. If =RedirectURLAppend= / =RedirectURLPrepend= are specified, these strings are concatenated with the result of the capture group before using it as the new URL. By default the =Redirect*= patterns are passed NOT along when fetching the new page, to prevent infinite redirection. This behavior can be modified by setting =MultipleRedirects= to a true value, so that multiple redirects using the same parameters are supported.
- StaticURL :: static image URL to return
- StaticHTML :: static HTML snippet to return
- Function :: a function to call. It receives the comic snippet as argument, and must return =($html, $title, $error)=.
- NoShowTitle :: if true, do not display the title of the comic (for those that always have it in the drawing).
- Template :: if present, specified a template that will be used for this comic (e.g. for comics coming from a single syndicated site, so the mechanism is the same for all of them) Essentially the fields from the template and the =$COMIC= snippet are merged and then processed in the usual way. If the template contains a =_Template_Code= atribute, it is executed on the merged snippet before processing it. Templates are defined in the file [[file:modules/20templates.pl][modules/20templates.pl]].

Precedence (from higher to lower) is =Function=, =StaticURL=, =StaticHTML=, =StartRegex= / =EndRegex= and =Regex=.

Both =Regex= and =StartRegex= / =EndRegex= use =Page=, and optionally =Prepend=, =Append=, =ExtraImgAttrsRegex=, =TitleRegex= and =SubstOnRegexResult=.

=StartRegex= / =EndRegex= optionally uses =InclusiveCapture=.

Comic definitions are loaded from the =modules= directory, from your =$HOME/.grabcartoons= modules directory, and from any directories (separated by colons) contained in the =GRABCARTOONS_DIRS= environment variable.

The easiest way is probably to take one of the existing modules and base yours on that.


* Contributions
   :PROPERTIES:
   :CUSTOM_ID: contributions
   :END:

If you develop any new modules, please share them! You can either post them to the project's [[http://github.com/zzamboni/grabcartoons/issues][issue tracker]], or fork the project, add your modules, and submit a [[https://github.com/zzamboni/grabcartoons/pulls][pull request]].

* Authors
   :PROPERTIES:
   :CUSTOM_ID: authors
   :END:

- [[http://github.com/zzamboni/][Diego Zamboni]]
- [[http://github.com/kuperman/][Benjamin Kuperman]]
